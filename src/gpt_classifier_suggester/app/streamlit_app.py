# streamlit_app.py
"""
This Streamlit app allows users to input a Reddit adoption post (title + content),
analyze its predicted engagement (high or low), and receive GPT-powered suggestions
to improve the post's engagement.

### Workflow:
1. Users enter the content and title of a Reddit adoption post in the input text area.
2. When the "Analyze & Get Suggestions" button is clicked:
   - The app predicts the pet type (dog or cat) and the probability of high engagement.
   - The engagement probability is used to classify the post as either 'High' or 'Low' engagement.
   - The app then displays the detected pet type, the predicted engagement status, and suggestions.
3. The app logs key actions such as text input submission, prediction completion, and suggestion generation.

### Logging:
- Logs warnings when the user submits an empty text input.
- Logs prediction results including the detected pet type and engagement probability.
- Logs successful suggestion generation.

### Streamlit Configuration:
- Page title: "Reddit Adoption Post Optimizer".
- Page icon: Paw emoji ("🐾").
- Layout: Centered display for better user experience.

### Dependencies:
- **sys** and **os**: For managing file paths and directories.
- **logging**: For logging messages related to the app's operations.
- **streamlit**: For creating the interactive web interface.
- **gpt_classifier_suggester.prediction.predictor**: For making engagement predictions.
- **gpt_classifier_suggester.gpt.suggestion**: For generating suggestions to improve post engagement.

### Notes:
- This app assumes that engagement predictions are based on a model that outputs a probability.
- The suggestions are generated by a GPT-powered model to help improve the post's chances of high engagement.
"""

import sys
import os
import logging
import streamlit as st

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

from gpt_classifier_suggester.prediction.predictor import full_predict
from gpt_classifier_suggester.gpt.suggestion import generate_gpt_suggestions

# Set logging
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../.."))
log_dir = os.path.join(project_root, "logs")
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(os.path.join(log_dir, "streamlit_app.log"), mode="a"),
        logging.StreamHandler(),
    ],
)

# set format for website
st.set_page_config(
    page_title="Reddit Adoption Post Optimizer", page_icon="🐾", layout="centered"
)

st.title("🐾 Reddit Adoption Post Optimizer 🐱 🐶")

text = st.text_area("✍️ Enter your Reddit post (title + content):", height=200)

# set button
if st.button("🔍 Analyze & Get Suggestions"):
    if not text.strip():
        st.warning("Please enter some text.")
        logging.warning("User submitted an empty text input.")
    else:
        pet_type, prob = full_predict(text)
        label = prob >= 0.5  # High engagement if probability >= 50%

        logging.info(
            f"Prediction completed. Detected pet_type={pet_type}, predicted prob={prob:.4f}"
        )

        st.markdown("---")
        st.markdown(f"### 🐶 Detected Animal Type: `{pet_type}`")
        st.markdown(
            f"### 🔮 Predicted Engagement: {'🟢 High' if label else '🔴 Low'} ({prob:.2%})"
        )

        st.markdown("---")
        st.markdown("### 💡 Suggestions to Improve Your Post")
        suggestions = generate_gpt_suggestions(text, pet_type, prob)
        st.markdown(suggestions)
        logging.info("Suggestions generated successfully.")
